#+BEGIN_COMMENT
.. title: How do you create a Tensor with constant values?
.. slug: constant-value-tensors
.. date: 2018-05-28 17:43:55 UTC-07:00
.. tags: tensorflow dummies
.. category: TensorFlow
.. link: 
.. description: Creating Tensors with constant values.
.. type: text
#+END_COMMENT

These are notes from *TensorFlow for Dummies* and the [[https://www.tensorflow.org/api_guides/python/constant_op#Constant_Value_Tensors][tensorflow documentation]].

#+BEGIN_SRC python :session chapter03 :results none
import sys
import tensorflow
#+END_SRC

#+BEGIN_SRC ipython :session chapter03 :results none
sys.stderr = sys.stdout
#+END_SRC

   There are various ways to create tensors by calling =tensorflow= functions with values that you specify. I'll list some of the ways to create tensors with pre-specified values. The =Argument= is just the main one you pass in to specify the tensor you want, each of the function has others as well, but they are optional. The =Returned Tensor Values= describes what values are held by the tensor that is returned by the function.

   | =tensorflow= Function | Argument            | Returned Tensor Values                           |
   |-----------------------+---------------------+--------------------------------------------------|
   | [[https://www.tensorflow.org/api_docs/python/tf/constant][constant]]              | Value(s)            | the value(s) you gave                            |
   | [[https://www.tensorflow.org/api_docs/python/tf/zeros][zeros]]                 | Shape               | all zeros                                        |
   | [[https://www.tensorflow.org/api_docs/python/tf/ones][ones]]                  | Shape               | All ones                                         |
   | [[https://www.tensorflow.org/api_docs/python/tf/fill][fill]]                  | Shape, Value        | All the given value                              |
   | [[https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/lin-space][linspace]]              | Start, Stop, Steps  | linearly spaced floats within the given range    |
   | [[https://www.tensorflow.org/api_docs/python/tf/range][range]]                 | Start, Limit, Delta | range of numbers based on start, stop, and delta |


** How do you create a tensor with a constant value or values in it?
   This is how you would create a tensor whose values never change. These are the arguments =tensorflow.constant= takes.

   | Argument | Description                            |
   |----------+----------------------------------------|
   | value    | value or list of values for the tensor |
   | dtype    | Type of the elements for the tensor    |
   | shape    | Dimensions of the tensor to create     |
   | name     | name for the tensor                    |

#+BEGIN_SRC ipython :session chapter03 :results output :exports both
print(tensorflow.constant(3))
#+END_SRC

#+RESULTS:
: Tensor("Const:0", shape=(), dtype=int32)

Passing in the value and the shape seems unnecessary, but the more specific you are, the more built in error handling you have. To actually raise an error on a mismatch, though, you have to pass in an extra =True= argument to turn on error checking. 

#+BEGIN_SRC ipython :session chapter03 :results output :exports both
try:
    tensorflow.constant([1,3], tensorflow.int16, [3], 'Fail', True)
except TypeError as error:
    print(error)
#+END_SRC

#+RESULTS:
: Expected Tensor's shape: (3,), got (2,).

Another useful thing about the =shape= argument is that if you pass in a single value and a shape, then it will create a tensor with the given shape and use the value you passed in to populate it. This would create a $3 \times 2$ tensor with 5 for all the values.

#+BEGIN_SRC ipython :session chapter03 :results output :exports both
print(tensorflow.constant(5, shape=[3, 2]))
#+END_SRC

#+RESULTS:
: Tensor("Const_6:0", shape=(3, 2), dtype=int32)

*** That's nice, but what do you do with it?
    The Tensor's we create are used to create a graph (there is one default one so as we create tensors we are adding them to this default graph). Then to actually do something we have to run them in a session. Here's how to do $4 + 8$ in TensorFlow.

#+BEGIN_SRC ipython :session chapter03 :exports both :results output
four = tensorflow.constant(4, dtype=tensorflow.float32)
eight = tensorflow.constant(8, dtype=tensorflow.float32)
four_plus_eight = four + eight

with tensorflow.Session() as session:
    print(session.run(four_plus_eight))
#+END_SRC

#+RESULTS:
: 12.0

And here's how you do $4 \times 8$.

#+BEGIN_SRC ipython :session chapter03 :exports both :results output
four_times_eight = four * eight
with tensorflow.Session() as session:
    print(session.run(four_times_eight))
#+END_SRC

#+RESULTS:
: 32.0

Excited?
** How do you create a tensor with only zeros or only ones in it?
   For the =zeros= and =ones= functions you only have to pass in the shape, but it does have some other arguments.

   | Argument | Description                                 |
   |----------+---------------------------------------------|
   | shape    | A list with the shape of the tensor         |
   | dtype    | The data-type you want the values to have   |
   | name     | A descriptive name to make debugging easier |

Here's how to create a $5 \times 6$ tensor filled with zeros.
#+BEGIN_SRC ipython :session chapter03 :exports both :results output
zeros = tensorflow.zeros([5, 6])
print(zeros)
#+END_SRC

#+RESULTS:
: Tensor("zeros_1:0", shape=(5, 6), dtype=float32)

Here's how to create a tensor with the same shape but filled with ones.

#+BEGIN_SRC ipython :session chapter03 :results output :exports both
ones = tensorflow.ones([5, 6])
print(ones)
#+END_SRC

#+RESULTS:
: Tensor("ones_2:0", shape=(5, 6), dtype=float32)

These are really convenience functions that do the same thing as the =constant= function. Since I'm  creating Tensors, you can use the operations on them as I did earlier.

If you multiply the ones by a scalar it will transmit it across the cells.

#+BEGIN_SRC ipython :session chapter03 :exports both :results output
with tensorflow.Session() as session:
    print(session.run(four * ones))
#+END_SRC

#+RESULTS:
: [[4. 4. 4. 4. 4. 4.]
:  [4. 4. 4. 4. 4. 4.]
:  [4. 4. 4. 4. 4. 4.]
:  [4. 4. 4. 4. 4. 4.]
:  [4. 4. 4. 4. 4. 4.]]

Since 0 is the identifier for addition we can do a similar thing to the zeros.
#+BEGIN_SRC ipython :session chapter03 :exports both :results output
with tensorflow.Session() as session:
    print(session.run(four + zeros))
#+END_SRC

#+RESULTS:
: [[4. 4. 4. 4. 4. 4.]
:  [4. 4. 4. 4. 4. 4.]
:  [4. 4. 4. 4. 4. 4.]
:  [4. 4. 4. 4. 4. 4.]
:  [4. 4. 4. 4. 4. 4.]]

** How do you create a tensor filled with the same value?
   The =fill= function creates a tensor with all the values and data-types being the same as the value you give it, so there's no =dtype= argument. I'm not sure when this would be preferable to using =constant=, maybe it's just a convenience function

   | Argument | Description                       |
   |----------+-----------------------------------|
   | dims     | The shape of the tensor           |
   | value    | The value to fill the tensor with |
   | name     | Descriptive name for debugging    |

The *Dummies* book says that =fill= only works with 32-bit floating point numbers, but that doesn't appear to be the case at the momemnt.

#+BEGIN_SRC ipython :session chapter03 :results output :exports both
print(tensorflow.fill([5, 6], 5))
#+END_SRC

#+RESULTS:
: Tensor("Fill_1:0", shape=(5, 6), dtype=int32)

** How do you create a tensor of evenly spaced numbers?
   The =linspace= (linear space) function will create a tensor with numbers evenly spaced from some start value to some end value. The start and stop values you give it are always the first and last values in the tensor.

   | Argument | Description                           |
   |----------+---------------------------------------|
   | start    | The first number in the sequence      |
   | stop     | The last number in the sequence       |
   | num      | The number of numbers in the sequence |

Here's how to create a tensor that represents a sequence from 5 to 13 with 7 numbers in the sequence.

#+BEGIN_SRC ipython :session chapter03 :exports both :results output
print(tensorflow.linspace(5.0, 13.0, 7))
#+END_SRC

#+RESULTS:
: Tensor("LinSpace_12:0", shape=(7,), dtype=float32)


Note that the number types are important here. The =start= and =stop= have to be floating point numbers (so use a decmal point) and them =num= has to be an integer (so don't put a decimal point).

#+BEGIN_SRC ipython :session chapter03 :results output :exports both
try:
    tensorflow.linspace(5, 13, 7)
except TypeError as error:
    print(error)
#+END_SRC

#+RESULTS:
: Value passed to parameter 'start' has DataType int32 not in list of allowed values: bfloat16, float32, float64

** How do you create a tensor with a range of numbers with a specific amount between each step?
   The =range= function creates a tensor works similarly to [[https://docs.python.org/3.5/library/functions.html#func-range][ipython's range]], you give a start value, an upper limit value and a step-size (what *tensorflow* calls a delta) and it creates values from the start up to the upper limit (but not including it).

   | Argument | Description                                                  |
   |----------+--------------------------------------------------------------|
   | start    | The first number in the range                                |
   | limit    | The upper bound for the range                                |
   | delta    | The amount to add to each previous value to create the range |
   | dtype    | The data-type for the values in the range                    |
   | name     | A label to make debugging easier                             |


This makes a range from 5 to 8 with steps of 2. By default it will use the data-type of the values you pass in, so I'll cast it to a float, just to be different.

#+BEGIN_SRC ipython :session chapter03 :exports both :results output
print(tensorflow.range(5, 8, 2, dtype=tensorflow.float32, name="Ted"))
#+END_SRC

#+RESULTS:
: Tensor("Ted_1:0", shape=(2,), dtype=float32)

