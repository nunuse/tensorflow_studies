#+BEGIN_COMMENT
.. title: Simple Linear Regression
.. slug: simple-linear-regression
.. date: 2018-06-06 15:07:25 UTC-07:00
.. tags: regression tensorflow dummies
.. category: regression
.. link: 
.. description: Simple linear regression with tensorflow.
.. type: text
#+END_COMMENT

* Introduction
  This extends the training example to perform a simple linear regression on the [[https://archive.ics.uci.edu/ml/datasets/Diabetes][Diabetes Data Set]]. 

* Imports
  I'm going to load the data from sklearn and use their [[http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html][LinearRegression]] class.

#+BEGIN_SRC ipython :session regression :results none
# from pypi
import pandas

import matplotlib.pyplot as pyplot
import seaborn

from pandas.plotting import scatter_matrix
from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

import tensorflow
#+END_SRC

#+BEGIN_SRC ipython :session regression :results none
%matplotlib inline
#+END_SRC

* The Data
  The dataset is built-in to sklearn. It returns a =bunch= object, which I couldn't find any documentation for, but it's basically just an object to hold the data.

#+BEGIN_SRC ipython :session regression :results none
diabetes = datasets.load_diabetes()
#+END_SRC

#+BEGIN_SRC ipython :session regression :results output
print(diabetes.DESCR)
#+END_SRC

#+RESULTS:
#+begin_example
Diabetes dataset
================

Notes
-----

Ten baseline variables, age, sex, body mass index, average blood
pressure, and six blood serum measurements were obtained for each of n =
442 diabetes patients, as well as the response of interest, a
quantitative measure of disease progression one year after baseline.

Data Set Characteristics:

  :Number of Instances: 442

  :Number of Attributes: First 10 columns are numeric predictive values

  :Target: Column 11 is a quantitative measure of disease progression one year after baseline

  :Attributes:
    :Age:
    :Sex:
    :Body mass index:
    :Average blood pressure:
    :S1:
    :S2:
    :S3:
    :S4:
    :S5:
    :S6:

Note: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times `n_samples` (i.e. the sum of squares of each column totals 1).

Source URL:
http://www4.stat.ncsu.edu/~boos/var.select/diabetes.html

For more information see:
Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) "Least Angle Regression," Annals of Statistics (with discussion), 407-499.
(http://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)

#+end_example

I'm going to convert the bunch to a pandas [[https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html][DataFrame]].

#+BEGIN_SRC ipython :session regression :results output
data = pandas.DataFrame(diabetes.data, columns=diabetes.feature_names)
data["target"] = pandas.Series(diabetes.target)
print(data.describe())
#+END_SRC

#+RESULTS:
#+begin_example
                age           sex           bmi            bp            s1  \
count  4.420000e+02  4.420000e+02  4.420000e+02  4.420000e+02  4.420000e+02   
mean  -3.639623e-16  1.309912e-16 -8.013951e-16  1.289818e-16 -9.042540e-17   
std    4.761905e-02  4.761905e-02  4.761905e-02  4.761905e-02  4.761905e-02   
min   -1.072256e-01 -4.464164e-02 -9.027530e-02 -1.123996e-01 -1.267807e-01   
25%   -3.729927e-02 -4.464164e-02 -3.422907e-02 -3.665645e-02 -3.424784e-02   
50%    5.383060e-03 -4.464164e-02 -7.283766e-03 -5.670611e-03 -4.320866e-03   
75%    3.807591e-02  5.068012e-02  3.124802e-02  3.564384e-02  2.835801e-02   
max    1.107267e-01  5.068012e-02  1.705552e-01  1.320442e-01  1.539137e-01   

                 s2            s3            s4            s5            s6  \
count  4.420000e+02  4.420000e+02  4.420000e+02  4.420000e+02  4.420000e+02   
mean   1.301121e-16 -4.563971e-16  3.863174e-16 -3.848103e-16 -3.398488e-16   
std    4.761905e-02  4.761905e-02  4.761905e-02  4.761905e-02  4.761905e-02   
min   -1.156131e-01 -1.023071e-01 -7.639450e-02 -1.260974e-01 -1.377672e-01   
25%   -3.035840e-02 -3.511716e-02 -3.949338e-02 -3.324879e-02 -3.317903e-02   
50%   -3.819065e-03 -6.584468e-03 -2.592262e-03 -1.947634e-03 -1.077698e-03   
75%    2.984439e-02  2.931150e-02  3.430886e-02  3.243323e-02  2.791705e-02   
max    1.987880e-01  1.811791e-01  1.852344e-01  1.335990e-01  1.356118e-01   

           target  
count  442.000000  
mean   152.133484  
std     77.093005  
min     25.000000  
25%     87.000000  
50%    140.500000  
75%    211.500000  
max    346.000000  
#+end_example

So we can see from the data-frame that the feature-names don't exactly match what was in the output (it says =bm= instead of =Body mass index=, for instance), but you get the idea of what's in there.

#+BEGIN_SRC ipython :session regression :results raw drawer :ipyfile /tmp/bmi.png
figure = pyplot.figure(figsize=(20,30))
axe = figure.gca()
plots = scatter_matrix(data, ax=axe, diagonal='kde')
#+END_SRC

#+RESULTS:
:RESULTS:
# Out[11]:
[[file:/tmp/bmi.png]]
:END:

It looks like =bmi= and =s5= are the most corellated with the target of having diabetes. To make it a simple case, I'm only going to use one input variable (=bmi=) so the model will be $y=mx+b$.

#+BEGIN_SRC ipython :session regression :results output
body_mass_index = data.bmi
print(X.describe())
#+END_SRC

#+RESULTS:
: count    4.420000e+02
: mean    -8.013951e-16
: std      4.761905e-02
: min     -9.027530e-02
: 25%     -3.422907e-02
: 50%     -7.283766e-03
: 75%      3.124802e-02
: max      1.705552e-01
: Name: bmi, dtype: float64


** Splitting the Training and Test Splitting
   I'm going to use sklearn's [[http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html][=train_test_split=]] function to split up the data.

#+BEGIN_SRC ipython :session regression :results none
x_train, x_test, y_train, y_test = train_test_split(body_mass_index, data.target)
#+END_SRC

#+BEGIN_SRC ipython :session regression :results output
assert x_train.shape == y_train.shape
assert x_test.shape == y_test.shape
print("BMI Training shape: {}".format(x_train.shape))
print("BMI Testing shape: {}".format(x_test.shape))
print("Diabetes Training shape: {}".format(y_train.shape))
print("Diabetes Testing shape: {}".format(y_test.shape))
#+END_SRC

#+RESULTS:
: BMI Training shape: (331,)
: BMI Testing shape: (111,)
: Diabetes Training shape: (331,)
: Diabetes Testing shape: (111,)

* Setting up the Net
** Test and Training Data
   To get it into the network we have to create tensors from the testing and training data.

#+BEGIN_SRC ipython :session regression :results none
x_training_data = tensorflow.constant(x_train, name="BMITraining")
y_training_data = tensorflow.constant(y_train, name="DiabetesTraining")
x_testing_data = tensorflow.constant(x_test, name="BMITesting")
y_testing_data = tensorflow.constant(y_test, name="DiabetesTesting")
#+END_SRC

