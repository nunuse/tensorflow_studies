#+BEGIN_COMMENT
.. title: Creating Tensors and Operation
.. slug: creating-tensors-and-operation
.. date: 2018-05-26 18:28:55 UTC-07:00
.. tags: tensorflow dummies
.. category: TensorFlow
.. link: 
.. description: How to create and transform tensors.
.. type: text
#+END_COMMENT

* Introduction
This is primarily about [[https://www.tensorflow.org/programmers_guide/tensors][tensors]]. Although they have a specific mathematical meeting, when working with them it might be easier just to think of them as arrays. Although the tensors look a lot like [[https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.html][numpy]] arrays, because TensorFlow defines all its parts before executing anything in a session, while more traditional python libraries like [[http://www.numpy.org/][numpy]] execute each line, all your operations need to be done through tensorflow's [[https://www.tensorflow.org/api_docs/python/][API]], rather than any other python method.

#+BEGIN_SRC ipython :session chapter03 :results none
import sys
import tensorflow
#+END_SRC

#+BEGIN_SRC ipython :session chapter03 :results none
sys.stderr = sys.stdout
#+END_SRC

** Okay, so what's a tensor?
   A tensor is an abstraction that encompasses the things you learned about in Linear Algebra and physics.

   - A tensor with zero dimensions is a *scalar*
   - A tensor with one dimension is a *vector*
   - A tensor with two dimensions is a *matrix*

  A *tensorflow* tensor:

  - is an instance of the [[https://www.tensorflow.org/api_docs/python/tf/Tensor][Tensor]] class
  - can have elements of type float, integer, string, or boolean, and all the elements of a tensor must be of the same type
  - can be created and operated on using the tensorflow API
* Creating Tensors
** Tensors with known values
   There are various ways to create tensors with values that you specify.

   | =tensorflow= Function | Description                                                             |
   |-----------------------+-------------------------------------------------------------------------|
   | =[[https://www.tensorflow.org/api_docs/python/tf/constant][constant]]=            | Returns a tensor with the single or values you pass in                  |
   | =[[https://www.tensorflow.org/api_docs/python/tf/zeros][zeros]]=               | Returns a tensor filled with zeros                                      |
   | =[[https://www.tensorflow.org/api_docs/python/tf/ones][ones]]=                | Returns a tensor filled with ones                                       |
   | =[[https://www.tensorflow.org/api_docs/python/tf/fill][fill]]=                | Returns a tensor filled with the value given                            |
   | =[[https://www.tensorflow.org/api_docs/cc/class/tensorflow/ops/lin-space][linspace]]=            | Returns a tensor with linearly spaced floats within the given range     |
   | =[[https://www.tensorflow.org/api_docs/python/tf/range][range]]=               | Returns a tensor with a range of numbers based on start, stop, and step |

Jargon*

| Term    | Meaning                                     |
|---------+---------------------------------------------|
| *rank*  | The number of dimensions of a tensor        |
| *shape* | The length of each of a tensor's dimensions |

** Constants
   One thing you can do is create a tensor with pre-determined value using the =constant= function. It takes four arguments.

   | Argument | Description                            |
   |----------+----------------------------------------|
   | value    | value or list of values for the tensor |
   | dtype    | Type of the elements for the tensor    |
   | shape    | Dimensions of the tensor to create     |
   | name     | name for the tensor                    |

Passing in the value and the shape seems unnecessary (and why pass in the type), but the more specific you are, the more built in error handling you have. To actually raise an error on a mismatch, though, you have to pass in an extra =True= argument to turn on error checking.

#+BEGIN_SRC ipython :session chapter03 :results output
print(tensorflow.constant([1,3], tensorflow.int16, [3], 'Fail', True))
#+END_SRC

#+RESULTS:
